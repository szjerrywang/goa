package dsl

import (
	"goa.design/goa/design"
	"goa.design/goa/dsl"
	"goa.design/goa/eval"
	httpdesign "goa.design/goa/http/design"
)

// Meta is a set of key/value pairs that can be assigned to an object. Each
// value consists of a slice of strings so that multiple invocation of the
// Meta function on the same target using the same key builds up the slice.
// Meta may be set on fields, methods, responses and service expressions.
//
// While keys can have any value the following names are handled explicitly by
// goa when set on fields.
//
// `struct:field:name`: overrides the Go struct field name generated by default
// by goa. Applicable to fields only.
//
//        Meta("struct:field:name", "MyName")
//
// `struct:tag:xxx`: sets the struct field tag xxx on generated Go structs.
// Overrides tags that goa would otherwise set. If the meta value is a
// slice then the strings are joined with the space character as separator.
// Applicable to fields only.
//
//        Meta("struct:tag:json", "myName,omitempty")
//        Meta("struct:tag:xml", "myName,attr")
//
// `swagger:tag:xxx`: sets the Swagger object field tag xxx.
// Applicable to services and endpoints.
//
//        Meta("swagger:tag:Backend")
//        Meta("swagger:tag:Backend:desc", "description of 'Backend'")
//        Meta("swagger:tag:Backend:url", "http://example.com")
//        Meta("swagger:tag:Backend:url:desc", "See more docs here")
//
// `swagger:summary`: sets the Swagger operation summary field.
// Applicable to endpoints.
//
//        Meta("swagger:summary", "Short summary of what endpoint does")
//
// `swagger:extension:xxx`: defines a swagger extension value.
// Applicable to all constructs that support Meta.
//
//        Meta("swagger:extension:x-apis-json", `{"URL": "http://goa.design"}`)
//
// The special key names listed above may be used as follows:
//
//        var Account = Type("Account", func() {
//                Field("service", String, "Name of service", func() {
//                        // Override default name
//                        Meta("struct:field:name", "ServiceName")
//                })
//        })
//
func Meta(name string, value ...string) {
	appendMeta := func(meta design.MetaExpr, name string, value ...string) design.MetaExpr {
		if meta == nil {
			meta = make(map[string][]string)
		}
		meta[name] = append(meta[name], value...)
		return meta
	}
	switch expr := eval.Current().(type) {
	case *httpdesign.RootExpr:
		expr.Meta = appendMeta(expr.Meta, name, value...)
	case *httpdesign.ServiceExpr:
		expr.Meta = appendMeta(expr.Meta, name, value...)
	case *httpdesign.EndpointExpr:
		expr.Meta = appendMeta(expr.Meta, name, value...)
	case *httpdesign.RouteExpr:
		expr.Meta = appendMeta(expr.Meta, name, value...)
	case *httpdesign.FileServerExpr:
		expr.Meta = appendMeta(expr.Meta, name, value...)
	case *httpdesign.HTTPResponseExpr:
		expr.Meta = appendMeta(expr.Meta, name, value...)
	default:
		dsl.Meta(name, value...)
	}
}
